/*
========================================================================================
    GENERAL
========================================================================================
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "${params.publish_dir_mode}",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

/*
========================================================================================
    INPUT
========================================================================================
*/

if(params.run_input_check) {
    process {
        withName: 'CLIPSEQ:PARSE_FASTQ_INPUT:SAMPLE_BASE_SAMPLESHEET_CHECK' {
            publishDir = [
                path: { "${params.outdir}/pipeline_info" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:PARSE_FASTQ_INPUT:CAT_FASTQ' {
            publishDir = [
                path: { "${params.outdir}/merged_samples" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_merged_fastq
            ]
        }
    }
}

/*
========================================================================================
    GENOME PREPARATION
========================================================================================
*/

if(params.run_genome_prep) {
    process {
        withName: 'UNTAR_.*' {
            ext.args2 = '--no-same-owner'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:REMOVE_GTF_BRACKETS' {
            ext.cmd1 = "sed 's/)/_/g' | sed 's/(/_/g'"
            ext.ext = 'gtf'
            ext.suffix = '_bracketsremoved'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:GUNZIP_FASTA' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:GUNZIP_GTF' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_GENOME:GUNZIP_FASTA' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_GENOME:CUSTOM_GETCHROMSIZES' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_GENOME:CUSTOM_GETCHROMSIZES' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:CLIPSEQ_FIND_LONGEST_TRANSCRIPT' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:CLIPSEQ_FILTER_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:ICOUNT_SEG_GTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:ICOUNT_SEG_FILTGTF' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED_REGIONS' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED_GENIC_OTHER' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:RESOLVE_UNANNOTATED_GENIC_OTHER_REGIONS' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_PRIMARY_INDEX:STAR_GENOMEGENERATE' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_indexes
            ]
        }

        withName: 'CLIPSEQ:PREPARE_CLIPSEQ:PREPARE_SMRNA_INDEX:BOWTIE_BUILD' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_indexes
            ]
        }
    }
}

/*
========================================================================================
    FASTQ + TRIMMING
========================================================================================
*/
if(params.run_move_umi_to_header) {
    process {
        withName: 'CLIPSEQ:UMITOOLS_EXTRACT' {
            ext.args   = { "--bc-pattern=${params.umi_header_format} --extract-method=string" }
            publishDir = [
                path: { "${params.outdir}/01_prealign/pre_trim_move_umi_to_header" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }
}

if(params.run_trim_galore_fastqc && !params.skip_fastqc) {
    process {
        withName: 'CLIPSEQ:FASTQC_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
            publishDir = [
                path: { "${params.outdir}/01_prealign/pre_trim_fastqc" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }
}

if(params.run_trim_galore_fastqc && !params.skip_trimming) {
    process {
        withName: 'CLIPSEQ:FASTQC_TRIMGALORE:TRIMGALORE' {
            ext.args   = "${params.trimgalore_params}"
            publishDir = [
                [
                    path: { "${params.outdir}/01_prealign/post_trim_fastqc" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimgalore" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimgalore" },
                    mode: "${params.publish_dir_mode}",
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

/*
========================================================================================
    ALIGNMENT
========================================================================================
*/

if(params.run_alignment) {
    process {
        withName: 'CLIPSEQ:RNA_ALIGN:BOWTIE_ALIGN' {
            ext.args = { "${params.bowtie_params}" }
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/smrna" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.out'
                ],
                [
                    path: { "${params.outdir}/02_alignment/smrna" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.bam',
                    enabled: false
                ],
                [
                    path: { "${params.outdir}/02_alignment/smrna/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned_res
                ]
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:BOWTIE_ALIGN_K1' {
            ext.args = { "-v 2 -m 100 --norc --best --strata -k 1" }
            ext.prefix = { "${meta.id}_withK1" }
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/smrna" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.out',
                    enabled: true
                ],
                [
                    path: { "${params.outdir}/02_alignment/smrna" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.bam',
                    enabled: false
                ],
                [
                    path: { "${params.outdir}/02_alignment/smrna/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: false
                ]
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_SORT_SMRNA' {
            ext.prefix = { "${meta.id}_sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/smrna" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_INDEX_SMRNA' {
            ext.prefix = { "${meta.id}_sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/smrna" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_align_intermed
            ]
        }

            withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_SORT_SMRNA_K1' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_INDEX_SMRNA_K1' {
            publishDir = [
                enabled: false
            ]
        }


        withName: 'CLIPSEQ:RNA_ALIGN:STAR_ALIGN' {
            ext.args   = {  "--readFilesCommand zcat --outSAMtype BAM Unsorted --quantMode TranscriptomeSAM ${params.star_params}"  }
            ext.prefix = { "${meta.id}_multi" }
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/genome/log" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.Log.*'
                ],
                [
                    path: { "${params.outdir}/02_alignment/genome" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*Aligned.sortedByCoord.out.bam',
                    enabled: params.save_align_intermed
                ],
                [
                    path: { "${params.outdir}/02_alignment/genome/unmapped" },
                    mode: "${params.publish_dir_mode}",
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned_res
                ]
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_INDEX_TRANSCRIPT' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/genome" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_SORT_GENOME' {
            ext.prefix = { "${meta.id}_multi.Aligned.toGenome_sorted.out" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/genome" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_INDEX_GENOME' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/genome" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_SORT_TRANSCRIPT' {
            ext.prefix = { "${meta.id}_multi.Aligned.toTranscriptome_sorted.out" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/genome" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_VIEW_GENOME' {
            ext.prefix = { "${meta.id}_unique_genome" }
            ext.args   = "-q 5 --output-fmt bam --write-index"
            ext.index_type = "bai"
            publishDir = [
                path: { "${params.outdir}/02_alignment/genome" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:RNA_ALIGN:SAMTOOLS_VIEW_TRANSCRIPT' {
            ext.prefix = { "${meta.id}_unique_transcriptome" }
            ext.args   = "-q 5 --output-fmt bam --write-index"
            ext.index_type = "bai"
            publishDir = [
                path: { "${params.outdir}/02_alignment/genome" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_align_intermed
            ]
        } 
    }
}

/*
========================================================================================
    READ FILTERING / UMI DEDUP_COLLAPSE
========================================================================================
*/

if(params.run_read_filter) {
    process {
        withName: 'CLIPSEQ:FILTER_TRANSCRIPTS' {
            ext.args   = '-h'
            ext.prefix = { "${meta.id}.transcript.filt" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:SAMTOOLS_SORT_FILT_TRANSCRIPT' {
            ext.prefix = { "${meta.id}.transcript.filt.sorted" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermed
            ]
        }

        withName: 'CLIPSEQ:SAMTOOLS_INDEX_FILT_TRANSCRIPT' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermed
            ]
        }
    }
}

if(params.run_umi_dedup) {
    process {
        withName: 'CLIPSEQ:GENOME_UNIQUE_DEDUP:UMICOLLAPSE' {
            ext.args = { "--umi-sep ${params.umi_separator}" }
            ext.prefix = { "${meta.id}.unique_genome.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:GENOME_MULTI_DEDUP:UMICOLLAPSE' {
            ext.args = { "--umi-sep ${params.umi_separator}" }
            ext.prefix = { "${meta.id}.multi_genome.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:SMRNA_DEDUP:UMICOLLAPSE' {
            ext.args = { "--umi-sep ${params.umi_separator}" }
            ext.prefix = { "${meta.id}.smrna.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:SMRNA_K1_DEDUP:UMICOLLAPSE' {
            ext.args = { "--umi-sep ${params.umi_separator}" }
            ext.prefix = { "${meta.id}.smrna_withk1.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:GENOME_UNIQUE_DEDUP:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:GENOME_MULTI_DEDUP:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:SMRNA_DEDUP:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:SMRNA_K1_DEDUP:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:TRANSCRIPT_DEDUP:UMICOLLAPSE' {
            ext.args = { "--umi-sep ${params.umi_separator}" }
            ext.prefix = { "${meta.id}.transcript.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:TRANSCRIPT_DEDUP:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:TRANSCRIPT_DEDUP:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.transcript.dedup" }
            publishDir = [
                path: { "${params.outdir}/03_filt_dedup" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }
    }
}

/*
========================================================================================
    CROSSLINKS
========================================================================================
*/

if(params.run_calc_crosslinks) {
    process {
        withName: 'CLIPSEQ:CALC_GENOME_CROSSLINKS' {
            ext.suffix = '.genome'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:CALC_TRANSCRIPT_CROSSLINKS' {
            ext.suffix = '.transcript'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:CALC_SMRNA_K1_CROSSLINKS' {
            ext.suffix = '.smrna_withk1'
            publishDir = [
                path: { "${params.outdir}/04_crosslinks" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

/*
========================================================================================
    PEAKCALLING
========================================================================================
*/

if(params.run_peak_calling) {
    process {
        withName: 'CLIPSEQ:CLIPPY_GENOME' {
            ext.args = { "${params.clippy_params}"  }
            ext.prefix = { "${meta.id}_genome.clippy." }
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/clippy" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:CLIPPY_TRANSCRIPT' {
            ext.args = { "--no_exon_info ${params.clippy_params}"  }
            ext.prefix = { "${meta.id}_transcript.clippy." }
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/clippy" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE_GENOME:PARACLU_PREPARE' {
            ext.cmd1 = 'awk \'{OFS = "\t"}{print \$1, \$6, \$2+1, \$5}\' | sort -k1,1 -k2,2 -k3,3n'
            ext.suffix = ''
            ext.ext = 'bed'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE_GENOME:PARACLU_PARACLU' {
            ext.prefix = { "${meta.id}_genome.paraclu" }
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/paraclu" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE_GENOME:PARACLU_CUT' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE_GENOME:PARACLU_CONVERT' {
            ext.cmd1 = 'awk \'{OFS = "\t"}{print \$1, \$3-1, \$4, ".", \$6, \$2}\' | sort -k1,1 -k2,2n'
            ext.suffix = '_genome.paraclu.peaks'
            ext.ext = 'bed'
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/paraclu" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE_TRANSCRIPT:PARACLU_PREPARE' {
            ext.cmd1 = 'awk \'{OFS = "\t"}{print \$1, \$6, \$2+1, \$5}\' | sort -k1,1 -k2,2 -k3,3n'
            ext.suffix = ''
            ext.ext = 'bed'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE_TRANSCRIPT:PARACLU_PARACLU' {
            ext.prefix = { "${meta.id}_transcript.paraclu" }
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/paraclu" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE_TRANSCRIPT:PARACLU_CUT' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:PARACLU_ANALYSE_TRANSCRIPT:PARACLU_CONVERT' {
            ext.cmd1 = 'awk \'{OFS = "\t"}{print \$1, \$3-1, \$4, ".", \$6, \$2}\' | sort -k1,1 -k2,2n'
            ext.suffix = '_transcript.paraclu.peaks'
            ext.ext = 'bed'
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/paraclu" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:ICOUNT_SUMMARY' {
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:MERGE_SUMMARY' {
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/icount" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:ICOUNT_RNAMAPS' {
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/icount" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:ICOUNT_SIGXLS' {
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/icount" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.scores.tsv"
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:ICOUNT_PEAKS' {
            ext.args = { "${params.icount_peaks_params}" }
            publishDir = [
                enabled: false
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:GUNZIP_SIGXLS' {
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/icount" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:ICOUNT_ANALYSE:GUNZIP_PEAKS' {
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/icount" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:PEKA' {
            ext.args = { "${params.peka_params}" }
            publishDir = [
                path: { "${params.outdir}/05_peak_calling/peka" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

/*
========================================================================================
    REPORTING
========================================================================================
*/

if(params.run_reporting) {
    process {
        withName: 'CLIPSEQ:DUMP_SOFTWARE_VERSIONS' {
            publishDir = [
                path: { "${params.outdir}/pipeline_info" },
                mode: "${params.publish_dir_mode}",
                pattern: '*_versions.yml'
            ]
        }

        withName: 'CLIPSEQ:CLIPSEQ_CLIPQC' {
            publishDir = [
                path: { "${params.outdir}/06_reports/clipqc" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'CLIPSEQ:MULTIQC' {
            ext.args   = params.multiqc_title ? "-v --title \"$params.multiqc_title\"" : '-v'
            publishDir = [
                path: { "${params.outdir}/06_reports/multiqc" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
